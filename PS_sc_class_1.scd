<슈콜(sc) 딱 두가지만 배워서 만드는 가벼운 전자음악>


첫 번째 시간 20180711 - 시퀀싱(진행)



우리는 두 번의 워크숍을 통해, 음악을 [시퀀싱(진행) + 소리]의 결합으로 가정하고 각각의 요소를 슈콜(sc)에서 어떻게 다루는지 배우고 실습할 것입니다.


--------------------------------------------------------------------------------
#0 sc를 사용하는데 있어서 가장 중요한 것! - 명령 실행과 중지
--------------------------------------------------------------------------------

단축키를 기억합시다!
1) 실행
mac: cmd + enter | windows: ctrl + enter
메뉴 중 'Language -> Evaluate Selection, Line or Region / Evaluate Selection or Line' 을 마우스로 실행해도 같은 결과

2) 중지
mac: cmd + . | windows: ctrl + .
메뉴 중 'Language -> Stop' 을 마우스로 실행해도 같은 결과


* sc의 명령은 소리를 내는 것도 있지만, 소리나지 않는것도 있다.

FreqScope.new(400, 300);
주파수 대역 분석기(spectrum analyzer, 주파수를 기준으로 분석 - Frequency domain)

s.scope;
파형 모양 분석기(time을 기준으로 분석 - Time domain)

10.rand; // post window를 보세요
10 미만의 랜덤한 숫자 발생

*Post window 여는 법 : 메뉴 중 'View -> Docklets -> Post window' 선택
Post window는 명령 실행의 결과 (성공 혹은 실패 등) 를 보여준다.

{SinOsc.ar(#[300, 490, 1200], mul: 0.1)!2}.play; // 300hz, 490hz, 1200hz 의 sin wave를 동시에 발생시킴

{Saw.ar(100, LFPulse.kr(SinOsc.kr(1/20).range(1, 10)))!2}.play;


주파수(frequency)?
: 보통 hz(헤르쯔)로 표기하고 1초에 진동하는 횟수를 나타냄. 주파수가 높을수록 듣기에 높은 소리가 발생됨.



--------------------------------------------------------------------------------
#1 시퀀싱
--------------------------------------------------------------------------------

Pdef명령 + Pbind명령의 실습

실행해야할 명령이 여러 줄인 경우 -> 구역을 선택하여 실행한다.

구역 선택 방법
mac: cmd + shift + r
windowns: ctrl + shift + r
메뉴 'Edit -> Select Region'


(// 전체 영역 선택 후 실행 -> Post window를 통해 결과 확인 : a Synthdef 라고 나온다면 성공!
SynthDef(\gobeat, {|freq = 240, dur = 0.2, gate = 1, amp = 0.5|
	var env = EnvGen.kr(Env.perc(0.01, dur), gate, doneAction: 2);
	var sig = SinOsc.ar(freq, 0, env);
	Out.ar(0, Pan2.ar(sig)*amp);
}).add;
)

(// 전체 영역 선택 후 실행
~p = Pdef(\seq,
	Pbind(
		\instrument, \gobeat,
		\freq, Pseq([60, 62, 64, 65, 67, 69, 71, 72], 1).midicps,
		\dur, 1,
		\delta, Pseq([2], inf),
		\amp, 0.5
	)
).play;
)


1. \freq (주파수 = 음높이)
왜 도레미파솔라시도 의 음이 소리나는가?
[60, 62, 64, 65, 67, 69, 71, 72] 가 각각
[도, 레, 미, 파, 솔, 라, 시, 도] 를 나타내는 숫자이기 때문. ==> midi note
=> 숫자 1 차이는 반음 차이, 숫자 2 차이는 온음 차이이다. 미-파는 반음, 시-도는 반음 간격이다.
==> 낮은 도에서 높은 도까지의 차이는 72 - 60 = 12. 한 옥타브 차이는 숫자 12 차이.

원하는 음으로 바꾸어가며 소리를 내보자.

60.midicps; // midi note -> cycle per second(freq) 변환
261.6255653006.cpsmidi; // cps -> midi note 변환


2. \dur (duration = 음의 길이)
1로 할 경우 sc의 기본 설정하에서는 1초를 나타냄.
1박으로 생각하고 진행해도 무방

3. \delta (앞선 음과 다음 음 사이의 시간 간격)
1로 할 경우 sc의 기본 설정하에서는 1초를 나타냄.
1박으로 생각하고 진행해도 무방

4. \amp (amplitude = 음량 = 소리크기)
범위 : 0 ~ 1.0


Pseq 만 알면 거의 끝남!
a = Pseq([500, 400, 300, 200, 100], 2); // 500 -> 400 -> 300 -> 200 -> 100 의 순서로 2번 반복 된다.
* 무한 반복을 위해서는 2 를 inf (infinite의 축약) 로 바꾸면 됨.
r = a.asStream;
r.next;



--------------------------------------------------------------------------------
#2 알면 좋은 것들 + 퀴즈
--------------------------------------------------------------------------------

주석처리(comment) : 문서에는 있지만 컴퓨터는 무시하고 받아들이는 부분을 만듦. 주로 실행과 관계없는 설명을 기록할 때 사용.
한 달 후에 내가 만든 코드를 보고 '이게 대체 뭐지?' 하는 상황에 대비하는 것.

/*
multi line
comment
*/
여러 줄 선택 후 cmd(ctrl) + /
혹은 직접 시작과 끝에 써주어도 같은 결과


// one line comment
주석처리하고 싶은 줄에서 cmd(ctrl) + /
줄 앞에 직접 써주어도 같은 결과

메뉴 중 'Edit -> Toggle Comment'
한 번 더 하면 주석이 해제됨


(
~p = Pdef(\seq,
	Pbind(
		\instrument, \gobeat,
		\freq, Pseq([61, 59, 61, 63, 64, 63, 61, 56, 59, 56], 1).midicps, // 퀴즈 1: 무한 반복으로 바꾸어 보시오.

		/* - 시퀀스 속의 시퀀스 : 일정 마디 마다(예를 들어 4마디) 한 줄의 시퀀스가 되도록 만들면 가독성에 도움이 된다
		\freq, Pseq([
			// Pseq([61, 59, 61, 63, 64, 63, 61, 56, 59, 56], 1).midicps,
			// Pseq([61, 59, 61, 63, 64, 63, 64, 66, 68, 64], 1).midicps,
			Pseq([60, 62, 64], inf).midicps
		], inf),
       */

		\dur, 1.2, // 퀴즈 2: Pseq를 적용하여 원하는 길이로 바꾸어 보시오.
		\delta, Pseq([0.75, 0.25, 0.5, 0.5, 0.75, 0.25, 0.5, 0.5, 0.75, 3.25], inf),
		\amp, 0.3
	)
).play;
)



--------------------------------------------------------------------------------
#3 변수(=주머니)에 담기와 그 이유
--------------------------------------------------------------------------------

~p = 변수 = 주머니 혹은 이름 붙이기(tag의 개념과 유사)
사용하는 이유: 많은 내용을 ~p 라는 이름에 넣어두면 나중에 ~p 로 간단히 불러 쓸 수 있게 된다.
아래에서 예를 보게됨.

세미콜론(;)의 의미 - 줄바꿈. 해당 줄이 끝났음을 컴퓨터에게 알려주는 표식. 세미콜론을 붙이지 않으면 컴퓨터는 계속 이어지는 하나의 줄로 인식한다.
줄 끝에는 ';' 를 붙이는 습관을 들이자.


(
~p = Pdef(\seq,
	Pbind(
		\instrument, \gobeat,
		\freq, Pseq([
			Pseq([61, 59, 61, 63, 64, 63, 61, 56, 59, 56], 1).midicps,
			Pseq([61, 59, 61, 63, 64, 63, 64, 66, 68, 64], 1).midicps,
		], inf),
		\dur, 1.2,
		\delta, Pseq([0.75, 0.25, 0.5, 0.5, 0.75, 0.25, 0.5, 0.5, 0.75, 3.25], inf),
		\amp, 0.3
	)
).play
)


오디오 플레이어에 있는 기능과 같음
~p.pause;
~p.resume;
~p.stop;
~p.play;




--------------------------------------------------------------------------------
#4 알면 좋은 것들 2 + 소리 바꾸기 맛보기
--------------------------------------------------------------------------------


여러 줄의 코드를 작성할 때는 가장 바깥의 괄호를 하나 더 만드는 습관을 들이는 것이 좋다.
: cmd(ctrl) + r 로 그 안의 전부를 선택하기 쉽게 해준다.

( // 이렇게


SynthDef(\gobeat, {|freq = 240, atk = 0.1, gate = 1, amp = 0.5|
	var env = EnvGen.kr(Env.perc(atk, 1.2), gate, doneAction: 2);
	var sig = SinOsc.ar(freq, 0, env);
	Out.ar(0, Pan2.ar(sig)*amp);
}).add;

) // 이렇게


실습
~p.play; 를 실행하고
위의 SyhthDef에서 atk = 0.1 의 숫자를 바꾸어 실행해 보세요. ex) 0.5, 1, 2...




--------------------------------------------------------------------------------
#5 자신만의 진행 만들기
--------------------------------------------------------------------------------


a. 목표
반복적인 멜로디를 만들어 보자
    두 번째 반복에서는 키를 바꾸어 보자

b. 방법
흥얼거림 -> 해당하는 미디노트 찾기 (리퍼의 피아노롤 이용하면 도움이 될 수 있다) -> sc의 Pseq로 변환

    미디 노트를 알아내기 위한 툴 - 리퍼 내려받기 및 설치 (*절대 음감이 있다면 필요 없음!!)
    https://www.reaper.fm/


c. 팁
- 한 번의 반복이 몇 박자를 가지게 할 것인가를 결정한다 (ex. 4박자, 8박자 등 관습적인 선택)
- 키를 바꿀때는 배열 전체에 +를 사용
[1, 2, 3, 4, 5] + 10; // 전체 숫자에 10이 더해진다

- 두 번째 반복에서 다시 첫 번째 반복으로 돌아올 때 뭔가 특별하거나 유니크한 것이 생길 수 있는 약간의 변형을 줘보자
[1, 2, 3, 4, 5.rand];


d. 연습
기준이 되는 베이스 음(리듬) 만들기
(
~bass = Pdef(\seq_bass,
	Pbind(
		\instrument, \gobeat,
        \freq, Pseq([52, 52, 52, 47], inf).midicps,
		\dur, Pseq([0.4, 0.4, 0.4, 0.4], inf),
		\delta, 0.5,
		\amp, Pseq([0.3, 0.1, 0.1, 0.1], inf)
	)
).play;
)


멜로디 만들기
(
~mel = Pdef(\seq_mel,
	Pbind(
		\instrument, \gobeat,
        \freq, Pseq([ 52, 54, 56, 57, 56, 54, 56 ], inf).midicps,
		\dur, Pseq([0.75, 0.25, 0.75, 0.25, 0.5, 0.5, 1]*0.9, inf),
		\delta, Pseq([0.75, 0.25, 0.75, 0.25, 0.5, 0.5, 1], inf),
		\amp, Pseq([0.3, 0.2, 0.3, 0.2, 0.3, 0.3, 0.31], inf)
	)
).play;
)

두 개의 시퀀스 동시에 실행하기
~bass.play;~mel.play;




e. 화음으로 구성하기 - 추가로 알면 좋은 것들
[60, 64, 67] vs #[60, 64, 67] : 앞의 것은 순차 실행, 뒤의 것은 한 번에 실행(화음)

(
~key = 2; // 2를 더할 경우 전체에 2가 더해지므로 레 + 파# + 라 의 구성이 됨
{SinOsc.ar((#[60, 64, 67] + ~key).midicps, mul: 0.1)!2}.play; // 도 + 미 + 솔
)


화음 적용 샘플
(
~har = Pdef(\seq_har,
	Pbind(
		\instrument, \gobeat,
		\freq, Pseq([ #[56, 64], #[59, 68, 71] ], inf).midicps,
		\dur, Pseq([4]*0.9, inf), // 길이를 늘리는데 한계가 있다. 이런 경우 소리의 속성 자체를 바꾸어야 한다. 다음시간에...
		\delta, Pseq([4], inf),
		\amp, Pseq([#[0.2, 0.2], #[0.2, 0.2, 0.2]], inf)
	)
).play;
)


세 개의 시퀀스 동시에 실행하기
~bass.play;~mel.play;~har.play;




--------------------------------------------------------------------------------
#6 속도(BPM)
--------------------------------------------------------------------------------

속도(BPM) 조절하기
TempoClock.default.tempo_(50/60); // 기본 시계. 60/60 일 경우 1.0.wait의 1.0이 실제 1초가 된다.


// 속도 설정에 따른 1.0.wait의 속도 비교
{2.do{|i| i.postln; 1.0.wait;}}.fork;


각각의 시퀀스마다 다른 속도 주기
~t1 = TempoClock.new; // ~t1 라는 이름의 템포를 만든다.
~t1.tempo_(80/60); // ~t1의 속도를 설정한다.
~t1.tempo; // 설정된 속도 확인 -> Post window


~t2 = TempoClock.new;
~t2.tempo_(30/60);
~t2.tempo;


실행 에제
(
~bass = Pdef(\seq_bass,
	Pbind(
		\instrument, \gobeat,
        \freq, Pseq([52, 52, 52, 47], inf).midicps,
		\dur, Pseq([0.4, 0.4, 0.4, 0.4], inf),
		\delta, 0.5,
		\amp, Pseq([0.3, 0.1, 0.1, 0.1], inf)
	)
).play(~t1); // ~t1을 템포로 가지도록 설정
)


(
~mel = Pdef(\seq_mel,
	Pbind(
		\instrument, \gobeat,
        \freq, Pseq([ 52, 54, 56, 57, 56, 54, 56 ], inf).midicps,
		\dur, Pseq([0.75, 0.25, 0.75, 0.25, 0.5, 0.5, 1]*0.9, inf),
		\delta, Pseq([0.75, 0.25, 0.75, 0.25, 0.5, 0.5, 1], inf),
		\amp, Pseq([0.3, 0.2, 0.3, 0.2, 0.3, 0.3, 0.31], inf)
	)
).play(~t2); // ~t2를 템포로 이용하도록 설정
)






--------------------------------------------------------------------------------
#7 마무리 & 샘플
--------------------------------------------------------------------------------

코드가 실행의 되지 않을 때 확인할 것
- 괄호 짝 맞추기
- 이름이 정해진 것과 정해지지 않은 것 구분해서 사용하였는지 확인



(
// 세 개의 패턴을 한 번에 실행 할 수 있게
// 시작시에 속도를 결정할 수 있게
// 키를 바꾸거나, 음량을 바꾸는 부분을 변수로 처리하여 변경 실행이 편리하게 구성

TempoClock.default.tempo_(55/60); // 기본 시계라고 생각하면 된다. 1.0.wait의 길이를 달라지게 한다.
~amp_anc_a = 0.1/2;
~amp_anc_b = 0.2/2;
~amp_anc_c = 0.2/2;
// ~amp_anc_a = 0.1;
// ~amp_anc_b = 0.2;
// ~amp_anc_c = 0.2;

~key_diff = 0;

~p1 = Pdef(\seq1,
	Pbind(
		\instrument, \gobeat,
        \freq, Pseq([52, 52, 52, 71], inf).midicps,
		// \atk, Pseq([0.1, 0.2, 0.5], inf),
		\dur, Pseq([0.4, 0.1, 0.1], inf),
		// \dur, 1.2,
		\delta, 0.5,
		\amp, ~amp_anc_a

	)
).quant_(0);


~p2 = Pdef(\seq2,
	Pbind(
		\instrument, \gobeat,
        //\freq, Pseq([69, 69, 69]-5, inf).midicps,
		\freq, Pseq([69, 69, 69]-5, inf).midicps,
		// \atk, Pseq([0.1, 0.2, 0.5], inf),
		\dur, Pseq([1.0, 0.25, 0.75], inf),
		// \dur, 1.2,
		\delta, Pseq([0.75, 0.25, 1], inf),
		\amp, ~amp_anc_b
	)
).quant_(0);



~p3 = Pdef(\seq3,
	Pbind(
		\instrument, \gobeat,
        //\freq, Pseq([69, 69, 69]-5, inf).midicps,
//		\freq, Pseq([61, 59, 61, 63, 64, 63, 61, 56, 59, 56], inf).midicps,
		\freq, Pseq([
			Pseq([61, 59, 61, 63, 64, 63, 61, 56, 59, 56]-~key_diff, 1).midicps,
			Pseq([61, 59, 61, 63, 64, 63, 64, 66, 68, 64]-~key_diff, 1).midicps,
			Pseq([61, 59, 61, 63, 64, 63, 61, 56, 59, 56]-~key_diff, 1).midicps,
			Pseq([61, 59, 61, 63, 64, 63, 64, 66, 68, 68]-~key_diff, 1).midicps
		], inf),
		// \atk, Pseq([0.1, 0.2, 0.5], inf),
		// \dur, Pseq([0.25], inf), // no sustain
		\dur, 1.2, // sustain
		\delta, Pseq([0.75, 0.25, 0.5, 0.5, 0.75, 0.25, 0.5, 0.5, 0.75, 3.25], inf),
		\amp, ~amp_anc_c
	)
).quant_(0);

~p1.play;~p2.play;~p3.play;
)
