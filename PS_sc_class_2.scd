<슈콜(sc) 딱 두가지만 배워서 만드는 가벼운 전자음악>


두 번째 시간 20180712 - 소리만들기(Synth)



--------------------------------------------------------------------------------
#0 지난 시간의 복습 및 질문
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
#1 SynthDef(소리 = 악기) 분석
--------------------------------------------------------------------------------

sc에서 소리를 SynthDef의 형태로 정의한다. 첫 시간에 사용했던 소리도 SynthDef.

(
SynthDef(\gobeat, {|freq = 240, dur = 0.2, gate = 1, amp = 0.5|
	var env = EnvGen.kr(Env.perc(0.01, dur), gate, doneAction: 2);
	var sig = SinOsc.ar(freq, 0, env);
	Out.ar(0, Pan2.ar(sig)*amp);
}).add;
)

을 보기 편하게 풀어서 쓰면 아래와 같다.


( // 첫 시간의 팁 - 영역 선택이 쉽도록 역활 없는 괄호를 추가할 수 있다.

SynthDef( // 이제부터 SynthDef를 만들겠다
	\gobeat, // SynthDef의 이름

	{ // { 열고,

		| // '|' 열고
		    freq = 240, dur = 0.2, gate = 1, amp = 0.5

		/*
		'아규먼트'라고 부름. SynthDef안에서 사용되는 변수라고 생각하면 됨.
		이후로 'freq'를 사용하면 미리 정의된 240을 사용하는 것과 같게 된다.
		이 '아규먼트'들은 소리가 나고 있는 동안에도 자유롭게 변경될 수 있다. ==> 소리를 다룰 수 있는 자유도가 높아진다.
		*/

		| // '|' 닫고 (모양이 같아서 @.@)

		var env = EnvGen.kr(Env.perc(0.01, dur), gate, doneAction: 2); // var(=variable, 로컬 변수 선언시 지켜야만 하는 규칙)

		var sig = SinOsc.ar(freq, 0, env); // 역시 var 선언. 그 안의 구체적 내용은 아래에서 설명.

		Out.ar(0, Pan2.ar(sig)*amp); // SynthDef를 만들때 반드시 필요! 소리가 출력(Out)되는 라인을 달아주는 것.

	} // } 닫고

).add; // 여기까지 정의한 SynthDef를 sc가 사용할 수 있게 서버에 추가한다. (sc는 'client - server' 구조)


)


우리의 목표
처음부터 만들지 않아도 됨. 기존의 것을 변형해서 사용할 수 있다면 충분!



SynthDef의 기본 구조

(
SynthDef(
	이름,
	{
		| 아규먼트들 |

		필요한 소리 요소들 1
		필요한 소리 요소들 2
		필요한 소리 요소들 3
		.
		.
		.

		Out.ar(0, Pan2.ar(내보내려는 소리))

	}

).add;
)



--------------------------------------------------------------------------------
#2 SynthDef를 구성하는 요소들
--------------------------------------------------------------------------------

a. 기본적인 소리들 - 복잡한 소리를 만들기 위한 작은 부품(모듈)들이라고 생각합시다
{SinOsc.ar(440, mul: 0.2)!2}.scope;
{Saw.ar(440, mul: 0.2)!2}.play;
{Pulse.ar(200, mul: 0.2)!2}.play;
{PinkNoise.ar(0.2)!2}.play;

이밖에도 sc에는 수많은 소리들이 있음.
헬프파일 -> Search 탭, 'Tour of UGens'를 찾아보자.


b. 엔벨롭 - 시간에 따른 음량의 변화 그래프?
기본적인 엔벨롭들을 들어보는 예제, plot 사용?

c. Panning - 스테레오일 경우, left/right 소리의 비율
Pan2.ar(signal, pos: -1 ~ 1, level: 0.0 ~ 1.0);



--------------------------------------------------------------------------------
#3 SynthDef로 소리내기(SynthDef -> Synth)
--------------------------------------------------------------------------------

SynthDef가 소리에 대한 설계도라면 그것으로부터 만들어지는 Synth는 소리 그 자체이다.


(
SynthDef("gobeat", {|freq = 240, dur = 0.2, gate = 1, amp = 0.5|
	var env = EnvGen.kr(Env.perc(0.01, dur), gate, doneAction: 2);
	var sig = SinOsc.ar(freq, 0, env);
	Out.ar(0, Pan2.ar(sig)*amp);
}).add;
) // 실행 후 Post window 확인

~s1 = Synth(\gobeat);  // 실행 후 Post window 확인
~s1 = Synth(\gobeat, ['freq', 600]); // 아규먼트(argument)에 변화 주기
~s1 = Synth(\gobeat, ["freq", 200, \amp, 0.2]); // 여러 아규먼트(argument)에 변화 주기


어떤 아규먼트가 'dur'라는 이름을 가진다고 할 때,
"dur", 'dur', \dur 모두 사용가능하다. SynthDef의 이름 역시 "gobeat", 'gobeat', \gobeat 모두 허용된다.



--------------------------------------------------------------------------------
#4 SynthDef 변형하기
--------------------------------------------------------------------------------

단발적인 소리 -> 지속되는 소리


변화주기(set)


--------------------------------------------------------------------------------
#4 기존 패턴에 적용하기
--------------------------------------------------------------------------------






--------------------------------------------------------------------------------
#4 참고 사항
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
#4 혼자서 공부하기
--------------------------------------------------------------------------------

헬프파일 보는 법


소리를 바꾸는 것으로 시퀀스를 바꾸는 것과 같은 효과
소리 자체의 속성에서 리듬감을 만들어 내는 경우라든지. 미지의 영역이나 신경쓰지 못하는 부분이 생길 수 있는데 이 부분에 대해서도 호기심을 갖고 긍정해 보는 것도 괜찮다.
